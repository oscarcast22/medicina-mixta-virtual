---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Nav from "../../sections/Nav.astro";
import LicenciaturaHero from "../../sections/LicenciaturaHero.astro";
import Medicina from "../../icons/medicina.astro";
import Footer from "../../sections/Footer.astro";
import { getCollection } from "astro:content";
import DesktopView from "../../sections/medicina/DesktopView.astro";
import MobileView from "../../sections/medicina/MobileView.astro";

const licenciaturas = await getCollection('licenciaturas');

const medicinaData = licenciaturas.find(l => l.data.titulo === "Medicina General")

if (!medicinaData) {
  throw new Error("Medicina General data not found");
}

console.log(medicinaData.data)
---
<BaseLayout title="Medicina Mixta-Virtual" description="Sitio principal de Medicina Mixta Virtual UAD">
    <Nav LicenciaturaTitle="Medicina" LicenciaturaSlug={"medicina-mixta-virtual"}/>
    <LicenciaturaHero 
        image={medicinaData.data.portada}
        title={medicinaData.data.titulo}
        rvoe={medicinaData.data.rvoe} 
    >
        <Medicina width="102px" />
    </LicenciaturaHero>
    <main id="medicina">
        <div class="max-w">
            <DesktopView data={medicinaData.data} />
            <MobileView data={medicinaData.data} />
        </div>
        <Footer />
    </main>
</BaseLayout>

<style>
    main {
        background: var(--gray-950);
    }

    .max-w {
        padding: 30px 20px;
        max-width: 1280px;
        margin: auto;
    }
</style>

<style is:global>
    .modal {
        display: none;
        position: fixed;
        flex-direction: column;
        justify-content: center;
        align-items: end;
        z-index: 250;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.9);
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    .modal.show {
        display: flex;
        opacity: 1;
    }

    .modal-content {
        margin: 10px auto;
        display: block;
        width: 95%;
        max-width: 1080px;
        animation: modalContentShow 0.5s ease;
    }

    .close {
        color: #fff;
        font-size: 40px;
        font-weight: bold;
        transition: 0.3s;
        cursor: pointer;
        margin: 0 3.5vw 0;
    }

    .close:hover,
    .close:focus {
        color: #bbb;
        text-decoration: none;
        cursor: pointer;
    }

    @media only screen and (max-width: 700px) {
        .modal-content {
            width: 98%;
        }
    }

    @keyframes modalContentShow {
        from {
            transform: scale(0.8);
            opacity: 0;
        }
        to {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>

<script>
    function initializeLargeView(): void {
        const buttons: NodeListOf<HTMLElement> = document.querySelectorAll('.menu-btn');
        const sections: NodeListOf<HTMLElement> = document.querySelectorAll('.content-section > div');
        const contentContainer: HTMLElement | null = document.querySelector('.content-section');

        function animateHeight(element: HTMLElement, from: number, to: number): void {
            element.style.height = `${from}px`;
            element.offsetHeight;
            element.style.transition = 'height 0.5s ease';
            element.style.height = `${to}px`;
        }

        let defaultSectionId: string = 'proposito-content';
        const hash = window.location.hash;
        if (hash) {
            switch (hash.toLowerCase()) {
                case '#plan_de_estudios':
                    defaultSectionId = 'plan-content';
                    console.log(defaultSectionId);
                    break;
                case '#mapa_curricular':
                    defaultSectionId = 'mapa-content';
                    break;
            }
        }

        const defaultSection: HTMLElement | null = document.getElementById(defaultSectionId);
        console.log(defaultSection);

        sections.forEach((section: HTMLElement) => {
            section.classList.add('hidden');
            section.classList.remove('fade-in');
        });

        if (defaultSection) {
            defaultSection.classList.remove('hidden');
            defaultSection.classList.add('fade-in');

            const defaultButton: HTMLElement | null = document.querySelector(`[data-target="${defaultSectionId}"]`);
            if (defaultButton) {
                defaultButton.classList.add('selected');
            }
        }

        if (contentContainer && defaultSection) {
            contentContainer.style.height = `${defaultSection.scrollHeight}px`;
        }

        buttons.forEach((button: HTMLElement) => {
            button.addEventListener('click', function (this: HTMLElement) {
                buttons.forEach((btn: HTMLElement) => btn.classList.remove('selected'));
                this.classList.add('selected');

                const target: string | null = this.getAttribute('data-target');
                const targetSection: HTMLElement | null = target ? document.getElementById(target) : null;

                if (contentContainer && targetSection) {
                    const currentHeight: number = contentContainer.scrollHeight;

                    sections.forEach((section: HTMLElement) => {
                        section.classList.add('hidden');
                        section.classList.remove('fade-in');
                    });

                    targetSection.classList.remove('hidden');
                    targetSection.classList.add('fade-in');

                    requestAnimationFrame(() => {
                        animateHeight(contentContainer, currentHeight, targetSection.scrollHeight + 15);
                    });
                }
            });
        });
    }

    function setupCollapsibles(): void {
        const collapses: NodeListOf<Element> = document.querySelectorAll('.collapse');

        collapses.forEach((collapse: Element) => {
            const button: HTMLElement | null = collapse.querySelector('.menu-btn-m');
            const content: HTMLElement | null = collapse.querySelector('.collapse-content');
            const collapseId: string | null = content ? content.id : null;

            if (button && content) {
                // Remove existing event listeners to avoid duplication
                const newButton: HTMLElement = button.cloneNode(true) as HTMLElement;
                button.parentNode?.replaceChild(newButton, button);

                newButton.addEventListener('click', function () {
                    const isOpen: boolean = collapse.classList.contains('open');

                    collapses.forEach((otherCollapse: Element) => {
                        const otherButton: HTMLElement | null = otherCollapse.querySelector('.menu-btn-m');
                        const otherContent: HTMLElement | null = otherCollapse.querySelector('.collapse-content');

                        if (otherCollapse !== collapse) {
                            otherCollapse.classList.remove('open');
                            if (otherButton) {
                                otherButton.classList.remove('selected');
                            }
                            if (otherContent) {
                                otherContent.style.height = '0px';
                            }
                        }
                    });

                    let additionalHeight: number = 0;

                    switch (collapseId) {
                        case 'proposito-content':
                            if (window.innerWidth <= 306) {
                                additionalHeight = 135;
                            } else if (window.innerWidth <= 314) {
                                additionalHeight = 110;
                            } else if (window.innerWidth <= 343) {
                                additionalHeight = 90;
                            } else if (window.innerWidth <= 350) {
                                additionalHeight = 125;
                            } else if (window.innerWidth <= 365) {
                                additionalHeight = 115;
                            } else if (window.innerWidth <= 455) {
                                additionalHeight = 80;
                            } else if (window.innerWidth <= 475) {
                                additionalHeight = 100;
                            } else {
                                additionalHeight = 50;
                            }
                            break;
                        case 'plan-content':
                            additionalHeight = 25;
                            break;
                        case 'mapa-content':
                            additionalHeight = 0;
                            break;
                        default:
                            additionalHeight = 0;
                            break;
                    }

                    if (isOpen) {
                        collapse.classList.remove('open');
                        newButton.classList.remove('selected');
                        content.style.height = '0px';
                    } else {
                        collapse.classList.add('open');
                        newButton.classList.add('selected');
                        content.style.height = `${content.scrollHeight + additionalHeight}px`;
                        console.log(`content.style.height: ${content.style.height}`, `currentHeight: ${content.scrollHeight}`, `additionalHeight: ${additionalHeight}`, collapseId);
                    }
                });
            }
        });
    }

    function checkWindowSize(): void {
        const largeView: HTMLElement | null = document.getElementById('desktop-view');
        const mobileView: HTMLElement | null = document.getElementById('mobile-view');

        const isSmallScreen: boolean = window.innerWidth <= 600;

        if (isSmallScreen) {
            if (largeView) {
                largeView.style.display = 'none';
            }
            if (mobileView) {
                mobileView.style.display = 'block';
                setupCollapsibles();
            }
        } else {
            if (mobileView) {
                mobileView.style.display = 'none';
            }
            if (largeView) {
                largeView.style.display = 'grid';
                initializeLargeView();
            }
        }
    }

    document.addEventListener('astro:after-swap', function (): void {
        checkWindowSize();
    });

    function showModal(): void {
        const mapas: NodeListOf<Element> = document.querySelectorAll('.mapa');

        mapas.forEach((mapa: Element) => {
            const images: NodeListOf<HTMLImageElement> = mapa.querySelectorAll('img');

            images.forEach((img: HTMLImageElement) => {
                const modal: HTMLDivElement = document.createElement('div');
                modal.setAttribute('class', 'modal');
                modal.setAttribute('id', 'modal');

                const closeModal: HTMLSpanElement = document.createElement('span');
                closeModal.setAttribute('class', 'close');
                closeModal.innerHTML = '&times;';

                const modalContent: HTMLImageElement = document.createElement('img');
                modalContent.setAttribute('class', 'modal-content');
                modalContent.setAttribute('id', 'img-modal');

                const caption: HTMLDivElement = document.createElement('div');
                caption.setAttribute('id', 'caption');

                modal.appendChild(closeModal);
                modal.appendChild(modalContent);
                modal.appendChild(caption);
                document.body.appendChild(modal);

                function updateModalImage(img: HTMLImageElement): void {
                    if (modalContent && caption) {
                        img.onclick = function(): void {
                            console.log("img click");
                            modal.style.display = 'flex';
                            setTimeout(() => {
                                modal.classList.add('show');
                            }, 10);
                            modalContent.src = img.src;
                            caption.innerHTML = img.alt;
                        }
                    }
                }

                closeModal.onclick = function(): void {
                    modal.classList.remove('show');
                    setTimeout(() => {
                        modal.style.display = 'none';
                    }, 500);
                }

                document.addEventListener('click', function(event: MouseEvent) {
                    if (event.target === modal) {
                        console.log("click en el modal");
                        modal.classList.remove('show');
                        setTimeout(() => {
                            modal.style.display = 'none';
                        }, 500);
                    }
                });

                updateModalImage(img);
            });
        });
    }

    document.addEventListener('astro:page-load', function (): void {
        showModal();
        checkWindowSize();
    });

    window.addEventListener('resize', checkWindowSize);
</script>
